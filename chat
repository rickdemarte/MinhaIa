#!/bin/bash
# AI CLI - Cliente unificado para APIs de IA
# Wrapper bash para chamar os scripts Python apropriados
# Uso: ai "texto" [opções]

set -e  # Sair em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Repositório do projeto
GIT_FROM="github.com"
REPOSTORIO="rickdemarte"
PROJETO="MinhaIa"


# Diretório base do script - resolve links simbólicos
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink
done
SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

# Função para exibir ajuda
show_help() {
    cat << EOF
AI CLI - Cliente Unificado para APIs de IA

USO:
    chat "texto" [opções]

OPÇÕES PRINCIPAIS:
    --provider [openai|claude|deepseek|qwen|grok]  Escolhe o provider (padrão: openai)
    --help, -h                  Mostra esta ajuda
    --version                   Mostra a versão
    --list-models               Lista modelos disponíveis

OPÇÕES DE CONFIGURAÇÃO / INSTALAÇÃO:
    --setup [LOCAL]             Cria estrutura inicial do projeto
    --setup-force [LOCAL]       Cria estrutura inicial do projeto (força instalação removendo diretório existente e forçando instalação de dependências)
    --check-deps                Verifica dependências do sistema
    --install-deps              Instala dependências Python
    --install-deps-force        Instala dependências Python (forçado usando --break-system-packages)

OPÇÕES DE PROVIDER:
    --openai                    Usa OpenAI (padrão)
    --anthropic                 Usa Anthropic
    --deepseek                  Usa DeepSeek
    --qwen                      Usa Qwen
    --grok                      Usa Grok

OPÇÕES DE PERSONALIDADE:
    --persona NOME              Define a personalidade da IA (ex: --persona "engenheiro de software")
    --code LINGUAGEM            Gera código sem explicações

OPÇÕES DE MODELO:
    --fast                      Modelo rápido e econômico
    --smart                     Modelo equilibrado
    --smartest                  Modelo mais inteligente
    --absurdo                   Máximo poder (apenas OpenAI)
    --model NOME                Especifica modelo customizado

OPÇÕES DE FORMATAÇÃO:
    -t                          Remove markdown da resposta
    -f ARQUIVO                  Salva resposta em arquivo
    -p                          Formata como log do sistema

OPÇÕES DE VOZ:
    --voz [ARQUIVO]             Gera áudio MP3 (apenas OpenAI)
    --polly [ARQUIVO]           Gera áudio MP3 usando Amazon Polly
    --ouvir                     Reproduz áudio MP3 gerado
    --transcribe [ARQUIVO]      Transcreve áudio MP3 para texto

OPÇÕES DE ENTRADA:
    --codigo ARQUIVO            Analisa arquivo de código
    --pdf ARQUIVO               Analisa arquivo PDF
    --texto ARQUIVO             Lê texto de arquivo

EXEMPLOS:
    chat "Explique firewall"
    chat "O que é LGPD?" --provider claude --smart
    chat "Analise este código" --codigo script.py --smartest
    chat "Resuma" --pdf documento.pdf -f resumo.txt

VARIÁVEIS DE AMBIENTE:
    OPENAI_API_KEY              Chave da API OpenAI
    ANTHROPIC_API_KEY           Chave da API Anthropic
    DEEPSEEK_API_KEY            Chave da API DeepSeek
    QWEN_API_KEY                Chave da API Qwen

Para mais informações: https://github.com/rickdemarte/MinhaIa.git
EOF
}

# Função para mostrar versão
show_version() {
    echo "AI CLI v1.0.0"
    echo "Cliente unificado para OpenAI e Anthropic"
}

# Função para verificar dependências
check_dependencies() {
    local missing_deps=0
    
    # Verifica Python 3
    if ! command -v python3 &> /dev/null; then
        echo -e "${RED}✗ Python 3 não está instalado${NC}"
        echo "  Instale com: sudo apt install python3 python3-pip"
        missing_deps=1
    else
        echo -e "${GREEN}✓ Python 3 encontrado${NC}"
    fi
    
    # Verifica pip
    if ! command -v pip3 &> /dev/null; then
        echo -e "${RED}✗ pip3 não está instalado${NC}"
        echo "  Instale com: sudo apt install python3-pip"
        missing_deps=1
    else
        echo -e "${GREEN}✓ pip3 encontrado${NC}"
    fi
    
    # Verifica bibliotecas Python
    echo -e "\n${BLUE}Verificando bibliotecas Python...${NC}"
    
    for lib in openai anthropic pdfplumber xai_sdk uvicorn pypub fastapi boto3; do
        if python3 -c "import $lib" 2>/dev/null; then
            echo -e "${GREEN}✓ $lib instalado${NC}"
        else
            echo -e "${YELLOW}⚠ $lib não instalado${NC}"
            missing_deps=1
        fi
    done

    # Verifica AWS Cli e credenciais (se existem)
    echo -e "\n${BLUE}Verificando AWS CLI e credenciais...${NC}"
    if ! command -v aws &> /dev/null; then
        echo -e "${RED}✗ AWS CLI não está instalado${NC}"
        echo "  Instale com: sudo apt install awscli"
        missing_deps=1
    else
        echo -e "${GREEN}✓ AWS CLI encontrado${NC}"
    fi
    
    # Verifica arquivo ~/.aws/credentials
    if [ -f "$HOME/.aws/credentials" ]; then
        echo -e "${GREEN}✓ Arquivo ~/.aws/credentials encontrado${NC}"
    else
        echo -e "${YELLOW}⚠ Arquivo ~/.aws/credentials não encontrado${NC}"
        echo "    Configure com: aws configure"
    fi

    # Verifica variáveis de ambiente
    echo -e "\n${BLUE}Verificando variáveis de ambiente...${NC}"
    
    if [ -n "$OPENAI_API_KEY" ]; then
        echo -e "${GREEN}✓ OPENAI_API_KEY configurada${NC}"
    else
        echo -e "${YELLOW}⚠ OPENAI_API_KEY não configurada${NC}"
        echo "    Configure com: export OPENAI_API_KEY='sua-chave'"
    fi
    
    if [ -n "$ANTHROPIC_API_KEY" ]; then
        echo -e "${GREEN}✓ ANTHROPIC_API_KEY configurada${NC}"
    else
        echo -e "${YELLOW}⚠ ANTHROPIC_API_KEY não configurada${NC}"
        echo "    Configure com: export ANTHROPIC_API_KEY='sua-chave'"
    fi
    
    if [ -n "$DEEPSEEK_API_KEY" ]; then
        echo -e "${GREEN}✓ DEEPSEEK_API_KEY configurada${NC}"
    else
        echo -e "${YELLOW}⚠ DEEPSEEK_API_KEY não configurada${NC}"
        echo "    Configure com: export DEEPSEEK_API_KEY='sua-chave'"
    fi

    if [ -n "$GROK_API_KEY" ]; then
        echo -e "${GREEN}✓ GROK_API_KEY configurada${NC}"
    else
        echo -e "${YELLOW}⚠ GROK_API_KEY não configurada${NC}"
        echo "    Configure com: export GROK_API_KEY='sua-chave'"
    fi

    if [ -n "$QWEN_API_KEY" ]; then
        echo -e "${GREEN}✓ QWEN_API_KEY configurada${NC}"
    else
        echo -e "${YELLOW}⚠ QWEN_API_KEY não configurada${NC}"
        echo "    Configure com: export QWEN_API_KEY='sua-chave'"
    fi

    if [ $missing_deps -eq 1 ]; then
        echo -e "\n${YELLOW}Algumas dependências estão faltando.${NC}"
        echo "Execute: $0 --install-deps"
        return 1
    else
        echo -e "\n${GREEN}Todas as dependências estão instaladas!${NC}"
        return 0
    fi
}

# Função para instalar dependências
install_dependencies() {
    echo -e "${BLUE}Instalando dependências...${NC}"

    echo -e "${YELLOW}SCRIPT_DIR = $SCRIPT_DIR...${NC}"

    # Verifica se requirements.txt existe
    if [ ! -f "$SCRIPT_DIR/requirements.txt" ]; then
        echo -e "${RED}Erro: requirements.txt não encontrado${NC}"
        exit 1
    fi
    
    # Instala dependências
    echo "Executando: pip3 install $force -r $SCRIPT_DIR/requirements.txt"
    pip3 install $force -r "$SCRIPT_DIR/requirements.txt"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✓ Dependências instaladas com sucesso!${NC}"
    else
        echo -e "${RED}✗ Erro ao instalar dependências${NC}"
        exit 1
    fi
}

# Função para criar estrutura inicial se não existir
setup_structure() {
    if [ ! -d "$SCRIPT_DIR/src" ]; then
        
        echo -e "${YELLOW}Estrutura do projeto... Criando...${NC}"
        
        if [ ! -z $MESSAGE ]; then
            LOCAL="$MESSAGE/$PROJETO"
            SCRIPT_DIR="$LOCAL/$PROJETO"
        else
            LOCAL="$(pwd)/$PROJETO"
            echo "Nenhum local fornecido, usando diretório $LOCAL"
            SCRIPT_DIR="$(pwd)/$PROJETO"
        fi
        
        if [ -z $force ]; then
            # Verifica se o diretório já existe
            if [ -d "$LOCAL" ]; then
                echo -e "${RED}Erro: Diretório $LOCAL já existe.${NC}"
                echo "Use --setup-force para sobrescrever."
                exit 1
            fi
        else
            # Remove diretório existente se for forçado
            if [ -d "$LOCAL" ]; then
                echo -e "${YELLOW}Removendo diretório existente: $LOCAL${NC}"
                rm -rf "$LOCAL"
            fi
        fi

        # Remove barra no final do diretório
        LOCAL=$(echo "$LOCAL" | sed 's:/*$::')

        echo -e "${YELLOW}Clonando repositório do GitHub para $LOCAL...${NC}"

        git clone git@$GIT_FROM:$REPOSTORIO/$PROJETO $LOCAL

        echo -e "${GREEN}✓ Estrutura criada${NC}"

        echo -e "${YELLOW}Acessando o diretório do projeto: $LOCAL${NC}"
        
        # Pergunta se deseja instalar dependências, só prossegue se o usuário responder corretamente   
        while true; do
            read -p "Deseja instalar as dependências agora? (s/n): " resposta
            case $resposta in
                [Ss]* ) 
                    cd $LOCAL
                    install_dependencies
                    break
                    ;;
                [Nn]* ) 
                    echo -e "${YELLOW}Script finalizado! Você pode instalar as dependências mais tarde com: $0 --install-deps${NC}"
                    break
                    ;;
                * ) 
                    echo "Por favor, responda com 's' ou 'n'."
                    ;;
            esac
        done

        echo -e "${BLUE}Executando última verificação...${NC}"

        check_dependencies
      
        exit 0
    fi
}

# Função principal
main() {
    # Inicializa variáveis
    force=""

    # Verifica argumentos especiais
    case "${1:-}" in
        --help|-h)
            show_help
            exit 0
            ;;
        --version)
            show_version
            exit 0
            ;;
        --check-deps)
            check_dependencies
            exit $?
            ;;
        --install-deps)
            install_dependencies
            exit 0
            ;;
        --install-deps-force)
            force="--break-system-packages"
            install_dependencies
            exit 0
            ;;
        --setup)
            MESSAGE="${2:-}"
            setup_structure
            exit 0
            ;;
        --setup-force)
            force="--break-system-packages"
            MESSAGE="${2:-}"
            setup_structure
            exit 0
            ;;
    esac

    # Verifica se a estrutura existe
    if [ ! -f "$SCRIPT_DIR/src/main.py" ]; then
        echo -e "${RED}Erro: Arquivos do sistema não encontrados${NC}"
        echo "O projeto não está configurado corretamente."
        echo "Execute: $0 --setup [LOCAL]"
        exit 1
    fi

    # verifica se não há mensagem e nenhum argumento
    if [ -z "$MESSAGE" ] && [ $# -eq 0 ]; then
        show_help
        exit 0
    fi
    
    # Verifica Python
    if ! command -v python3 &> /dev/null; then
        echo -e "${RED}Erro: Python 3 não está instalado${NC}"
        echo "Instale com: sudo apt install python3 python3-pip"
        exit 1
    fi
    
    # Ativa ambiente virtual se existir
    if [ -d "$SCRIPT_DIR/venv" ]; then
        source "$SCRIPT_DIR/venv/bin/activate"
    fi
    
    # Adiciona o diretório do script ao PYTHONPATH
    export PYTHONPATH="$SCRIPT_DIR:$PYTHONPATH"
    
    # Executa o script Python principal
    python3 "$SCRIPT_DIR/src/main.py" "$@"
}

# Tratamento de sinais
trap 'echo -e "\n${RED}Interrompido pelo usuário${NC}"; exit 130' INT TERM

# Executa função principal
main "$@"